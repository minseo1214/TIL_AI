#한 곳에 정리 및 두번째 머신러닝 실행
from sklearn.neighbors import KNeighborsClassifier
import numpy as np
import matplotlib.pyplot as plt #mathplotlub의 pylot함수를 plt로 줄여서 사용.

fish_lenght=[25.4,26.3,26.5,29.0,29.0,29.7,29.7,30.0,30.0,30.7,31.0,31.0,31.5,32.0,32.0,32.0,33.0,33.0,33.5,33.5,34.0,34.0,34.5,35.0,35.0,35.0,35.0,36.0,36.0,37.0,38.5,38.5,39.5,41.0,41.0,9.8,10.5,10.6,11.0,11.2,11.3,11.8,11.8,12.0,12.2,12.4,13.0,14.3,15.0]
fish_weight=[242.0,290.0,240.0,363.0,430.0,450.0,500.0,390.0,450.0,500.0,475.0,500.0,500.0,340.0,600.0,600.0,700.0,700.0,610.0,650.0,575.0,685.0,620.0,680.0,700.0,725.0,720.0,714.0,850.0,1000.0,920.0,955.0,925.0,975.0,950.0,6.5,7.5,7.0,9.7,9.8,8.7,10.0,9.9,9.8,12.2,13.4,12.2,19.7,19.9]
fish_target=[1]*35+[0]*14
fish_data=[[l,w]for l,w in zip(lenght,weight)]
kn=KNeighborsClassifier()


train_input = fish_data[:35]
train_target=fish_target[:35]
test_input=fish_data[35:]
test_target=fish_target[35:]
kn=kn.fit(train_input,train_target)
kn.score(test_input,test_target)

input_arr=np.array(fish_data)
target_arr=np.array(fish_target)#target_data에 넘파이 array를 사용해 list를 넘파이의 배열로 바뀌게 된다.

print(input_arr.shape)#shape는 샘플의 수와 특성의 주를 출est_input=fish_data[35:]

np.random.seed(42)#seed라는 값을 기준으로 식에 대입되어 random값이 결정되는데 seed값을 설정하면 항상 같은 값이 나오게 된다
index=np.arange(49)#index에 넘파이 arange(n)을 하면1~(n-1)까지의 값이 차례로 index에 대입된다 
np.random.shuffle(index)#index안에 값을 랜덤적으로 섞어준다.

train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]

test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]


plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(test_input[:,0],test_input[:,1])
plt.xlabel('lenght')
plt.ylabel('weight')
plt.show()

kn=kn.fit(train_input,train_target)
kn.score(test_input,test_target)
kn.predict(test_input)
test_target
